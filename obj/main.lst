                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Mac OS X x86_64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init
                             13 	.globl _interruptHandler
                             14 	.globl _playmusic
                             15 	.globl _wait4UserKeypress
                             16 	.globl _clearScreen
                             17 	.globl _game
                             18 	.globl _drawText
                             19 	.globl _cpct_restoreState_mxor_u8
                             20 	.globl _cpct_setSeed_mxor
                             21 	.globl _cpct_akp_musicPlay
                             22 	.globl _cpct_akp_musicInit
                             23 	.globl _cpct_setPALColour
                             24 	.globl _cpct_setPalette
                             25 	.globl _cpct_fw2hw
                             26 	.globl _cpct_setVideoMode
                             27 	.globl _cpct_scanKeyboard_if
                             28 	.globl _cpct_memset
                             29 	.globl _cpct_setInterruptHandler
                             30 	.globl _cpct_disableFirmware
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DATA
   0000                      38 _interruptHandler_i_1_107:
   0000                      39 	.ds 1
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _INITIALIZED
                             44 ;--------------------------------------------------------
                             45 ; absolute external ram data
                             46 ;--------------------------------------------------------
                             47 	.area _DABS (ABS)
                             48 ;--------------------------------------------------------
                             49 ; global & static initialisations
                             50 ;--------------------------------------------------------
                             51 	.area _HOME
                             52 	.area _GSINIT
                             53 	.area _GSFINAL
                             54 	.area _GSINIT
                             55 ;--------------------------------------------------------
                             56 ; Home
                             57 ;--------------------------------------------------------
                             58 	.area _HOME
                             59 	.area _HOME
                             60 ;--------------------------------------------------------
                             61 ; code
                             62 ;--------------------------------------------------------
                             63 	.area _CODE
                             64 ;src/main.c:24: void playmusic() {
                             65 ;	---------------------------------
                             66 ; Function playmusic
                             67 ; ---------------------------------
   0000                      68 _playmusic::
                             69 ;src/main.c:39: __endasm;
   0000 D9            [ 4]   70 	exx
   0001 08                   71 	.db	#0x08
   0002 F5            [11]   72 	push	af
   0003 C5            [11]   73 	push	bc
   0004 D5            [11]   74 	push	de
   0005 E5            [11]   75 	push	hl
   0006 CDr00r00      [17]   76 	call	_cpct_akp_musicPlay
   0009 E1            [10]   77 	pop	hl
   000A D1            [10]   78 	pop	de
   000B C1            [10]   79 	pop	bc
   000C F1            [10]   80 	pop	af
   000D 08                   81 	.db	#0x08
   000E D9            [ 4]   82 	exx
   000F C9            [10]   83 	ret
                             84 ;src/main.c:43: void interruptHandler() {
                             85 ;	---------------------------------
                             86 ; Function interruptHandler
                             87 ; ---------------------------------
   0010                      88 _interruptHandler::
                             89 ;src/main.c:46: i++;
   0010 21r00r00      [10]   90 	ld	hl, #_interruptHandler_i_1_107+0
   0013 34            [11]   91 	inc	(hl)
                             92 ;src/main.c:47: switch(i) {
   0014 3Ar00r00      [13]   93 	ld	a,(#_interruptHandler_i_1_107 + 0)
   0017 FE 05         [ 7]   94 	cp	a,#0x05
   0019 CAr00r00      [10]   95 	jp	Z,_cpct_scanKeyboard_if
   001C FE 06         [ 7]   96 	cp	a,#0x06
   001E CAr00r00      [10]   97 	jp	Z,_playmusic
   0021 D6 09         [ 7]   98 	sub	a, #0x09
   0023 28 07         [12]   99 	jr	Z,00103$
   0025 C9            [10]  100 	ret
                            101 ;src/main.c:48: case 5: 
                            102 ;src/main.c:49: cpct_scanKeyboard_if();
                            103 ;src/main.c:50: break;
   0026 C3r00r00      [10]  104 	jp  _cpct_scanKeyboard_if
                            105 ;src/main.c:51: case 6:
                            106 ;src/main.c:53: playmusic();
                            107 ;src/main.c:54: break;
   0029 C3r00r00      [10]  108 	jp  _playmusic
                            109 ;src/main.c:55: case 9:
   002C                     110 00103$:
                            111 ;src/main.c:56: i=0;
   002C 21r00r00      [10]  112 	ld	hl,#_interruptHandler_i_1_107 + 0
   002F 36 00         [10]  113 	ld	(hl), #0x00
                            114 ;src/main.c:57: }
   0031 C9            [10]  115 	ret
                            116 ;src/main.c:60: void init() {
                            117 ;	---------------------------------
                            118 ; Function init
                            119 ; ---------------------------------
   0032                     120 _init::
                            121 ;src/main.c:62: cpct_disableFirmware();
   0032 CDr00r00      [17]  122 	call	_cpct_disableFirmware
                            123 ;src/main.c:63: cpct_setVideoMode(0);
   0035 2E 00         [ 7]  124 	ld	l,#0x00
   0037 CDr00r00      [17]  125 	call	_cpct_setVideoMode
                            126 ;src/main.c:64: cpct_fw2hw(hc_graphics_palette, 16);
   003A 21 10 00      [10]  127 	ld	hl,#0x0010
   003D E5            [11]  128 	push	hl
   003E 21r00r00      [10]  129 	ld	hl,#_hc_graphics_palette
   0041 E5            [11]  130 	push	hl
   0042 CDr00r00      [17]  131 	call	_cpct_fw2hw
                            132 ;src/main.c:65: cpct_setPalette(hc_graphics_palette, 16);
   0045 21 10 00      [10]  133 	ld	hl,#0x0010
   0048 E5            [11]  134 	push	hl
   0049 21r00r00      [10]  135 	ld	hl,#_hc_graphics_palette
   004C E5            [11]  136 	push	hl
   004D CDr00r00      [17]  137 	call	_cpct_setPalette
                            138 ;src/main.c:66: cpct_setBorder(HW_BLACK);
   0050 21 10 14      [10]  139 	ld	hl,#0x1410
   0053 E5            [11]  140 	push	hl
   0054 CDr00r00      [17]  141 	call	_cpct_setPALColour
                            142 ;src/main.c:67: cpct_akp_musicInit(hc_smoke);
   0057 21r00r00      [10]  143 	ld	hl,#_hc_smoke
   005A E5            [11]  144 	push	hl
   005B CDr00r00      [17]  145 	call	_cpct_akp_musicInit
   005E F1            [10]  146 	pop	af
                            147 ;src/main.c:68: cpct_setInterruptHandler(interruptHandler);
   005F 21r10r00      [10]  148 	ld	hl,#_interruptHandler
   0062 CDr00r00      [17]  149 	call	_cpct_setInterruptHandler
                            150 ;src/main.c:73: cpct_akp_musicPlay();
   0065 CDr00r00      [17]  151 	call	_cpct_akp_musicPlay
                            152 ;src/main.c:75: drawText("HERO QUEST IS READY", 31, 76, 1);
   0068 21 4C 01      [10]  153 	ld	hl,#0x014C
   006B E5            [11]  154 	push	hl
   006C 3E 1F         [ 7]  155 	ld	a,#0x1F
   006E F5            [11]  156 	push	af
   006F 33            [ 6]  157 	inc	sp
   0070 21rA8r00      [10]  158 	ld	hl,#___str_0
   0073 E5            [11]  159 	push	hl
   0074 CDr00r00      [17]  160 	call	_drawText
   0077 F1            [10]  161 	pop	af
                            162 ;src/main.c:76: drawText("PRESS ANY KEY", 20, 90, 1);
   0078 33            [ 6]  163 	inc	sp
   0079 21 5A 01      [10]  164 	ld	hl,#0x015A
   007C E3            [19]  165 	ex	(sp),hl
   007D 3E 14         [ 7]  166 	ld	a,#0x14
   007F F5            [11]  167 	push	af
   0080 33            [ 6]  168 	inc	sp
   0081 21rBCr00      [10]  169 	ld	hl,#___str_1
   0084 E5            [11]  170 	push	hl
   0085 CDr00r00      [17]  171 	call	_drawText
   0088 F1            [10]  172 	pop	af
   0089 F1            [10]  173 	pop	af
   008A 33            [ 6]  174 	inc	sp
                            175 ;src/main.c:78: seed = wait4UserKeypress();
   008B CDr00r00      [17]  176 	call	_wait4UserKeypress
                            177 ;src/main.c:80: if (!seed)
   008E 7A            [ 4]  178 	ld	a,d
   008F B3            [ 4]  179 	or	a, e
   0090 B4            [ 4]  180 	or	a, h
   0091 B5            [ 4]  181 	or	a,l
   0092 20 0A         [12]  182 	jr	NZ,00102$
                            183 ;src/main.c:81: seed++;
   0094 2C            [ 4]  184 	inc	l
   0095 20 07         [12]  185 	jr	NZ,00109$
   0097 24            [ 4]  186 	inc	h
   0098 20 04         [12]  187 	jr	NZ,00109$
   009A 1C            [ 4]  188 	inc	e
   009B 20 01         [12]  189 	jr	NZ,00109$
   009D 14            [ 4]  190 	inc	d
   009E                     191 00109$:
   009E                     192 00102$:
                            193 ;src/main.c:82: cpct_srand(seed);
   009E CDr00r00      [17]  194 	call	_cpct_setSeed_mxor
   00A1 CDr00r00      [17]  195 	call	_cpct_restoreState_mxor_u8
                            196 ;src/main.c:84: clearScreen();
   00A4 CDr00r00      [17]  197 	call	_clearScreen
   00A7 C9            [10]  198 	ret
   00A8                     199 ___str_0:
   00A8 48 45 52 4F 20 51   200 	.ascii "HERO QUEST IS READY"
        55 45 53 54 20 49
        53 20 52 45 41 44
        59
   00BB 00                  201 	.db 0x00
   00BC                     202 ___str_1:
   00BC 50 52 45 53 53 20   203 	.ascii "PRESS ANY KEY"
        41 4E 59 20 4B 45
        59
   00C9 00                  204 	.db 0x00
                            205 ;src/main.c:88: void main(void) {
                            206 ;	---------------------------------
                            207 ; Function main
                            208 ; ---------------------------------
   00CA                     209 _main::
                            210 ;src/main.c:91: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   00CA 21 00 40      [10]  211 	ld	hl,#0x4000
   00CD E5            [11]  212 	push	hl
   00CE AF            [ 4]  213 	xor	a, a
   00CF F5            [11]  214 	push	af
   00D0 33            [ 6]  215 	inc	sp
   00D1 26 C0         [ 7]  216 	ld	h, #0xC0
   00D3 E5            [11]  217 	push	hl
   00D4 CDr00r00      [17]  218 	call	_cpct_memset
                            219 ;src/main.c:93: init();
   00D7 CDr32r00      [17]  220 	call	_init
                            221 ;src/main.c:95: game();
   00DA CDr00r00      [17]  222 	call	_game
   00DD C9            [10]  223 	ret
                            224 	.area _CODE
                            225 	.area _INITIALIZER
                            226 	.area _CABS (ABS)
